* S_Ceasar/
    operators/
        modeling/
            __init__.py
            op_mod_subsurf_add.py
            op_mod_subsurf_edit.py
            op_mod_subsurf_remove.py
        __init__.py

    ui/
        __init__.py
        core_ui.py
        modeling_ui.py
    __init__.py

__init__.py

* S_Ceasar/operators/modeling/__init__.py

from . import op_mod_subsurf_add, op_mod_subsurf_edit, op_mod_subsurf_remove

def register():
    op_mod_subsurf_add.register()
    op_mod_subsurf_edit.register()
    op_mod_subsurf_remove.register()

def unregister():
    op_mod_subsurf_remove.unregister()
    op_mod_subsurf_edit.unregister()
    op_mod_subsurf_add.unregister()

* S_Ceasar/operators/modeling/op_mod_subsurf_add.py

import bpy

class SCEASAR_OT_add_subsurf_popup(bpy.types.Operator):
    bl_idname = "sceasar.add_subsurf_popup"
    bl_label = "Add Subsurf"
    bl_options = {'REGISTER', 'UNDO'}
    
    @classmethod
    def poll(cls, context):
        return context.selected_objects and any(obj.type == 'MESH' and obj.data.uv_layers for obj in context.selected_objects)

    viewport_levels: bpy.props.IntProperty(name="Viewport", default=2, min=0, max=6) # type: ignore
    render_levels: bpy.props.IntProperty(name="Render", default=2, min=0, max=6) # type: ignore

    def execute(self, context):
        meshes = [obj for obj in context.selected_objects if obj.type == 'MESH']
        if not meshes:
            self.report({'ERROR'}, "No mesh objects selected")
            return {'CANCELLED'}

        for obj in meshes:
            if "MySubsurf" not in obj.modifiers:
                mod = obj.modifiers.new(name="MySubsurf", type='SUBSURF')
            else:
                mod = obj.modifiers["MySubsurf"]

            mod.levels = self.viewport_levels
            mod.render_levels = self.render_levels

        self.report({'INFO'}, f"Subsurf applied to {len(meshes)} object(s)")
        return {'FINISHED'}

    def invoke(self, context, event):
        return context.window_manager.invoke_props_dialog(self)

    def draw(self, context):
        layout = self.layout
        col = layout.column(align=True)
        col.prop(self, "viewport_levels")
        col.prop(self, "render_levels")

def register():
    bpy.utils.register_class(SCEASAR_OT_add_subsurf_popup)

def unregister():
    bpy.utils.unregister_class(SCEASAR_OT_add_subsurf_popup)


* S_Ceasar/operators/modeling/op_mod_subsurf_edit.py

import bpy

class SCEASAR_OT_edit_subsurf_popup(bpy.types.Operator):
    bl_idname = "sceasar.edit_subsurf_popup"
    bl_label = "Edit Subsurf"
    bl_options = {'REGISTER', 'UNDO'}
    
    @classmethod
    def poll(cls, context):
        return context.selected_objects and any(obj.type == 'MESH' and obj.data.uv_layers for obj in context.selected_objects)

    viewport_levels: bpy.props.IntProperty(name="Viewport", default=2, min=0, max=6) # type: ignore
    render_levels: bpy.props.IntProperty(name="Render", default=3, min=0, max=6) # type: ignore

    def execute(self, context):
        meshes = [obj for obj in context.selected_objects if obj.type == 'MESH']
        count = 0
        for obj in meshes:
            mod = obj.modifiers.get("MySubsurf")
            if mod:
                mod.levels = self.viewport_levels
                mod.render_levels = self.render_levels
                count += 1

        if count == 0:
            self.report({'ERROR'}, "No Subsurf modifiers found on selected objects")
            return {'CANCELLED'}

        self.report({'INFO'}, f"Edited Subsurf on {count} object(s)")
        return {'FINISHED'}

    def invoke(self, context, event):
        # Pre-fill popup values from the active object if it has a subsurf
        obj = context.active_object
        if obj and obj.type == 'MESH':
            mod = obj.modifiers.get("MySubsurf")
            if mod:
                self.viewport_levels = mod.levels
                self.render_levels = mod.render_levels

        return context.window_manager.invoke_props_dialog(self)

    def draw(self, context):
        layout = self.layout
        col = layout.column(align=True)
        col.prop(self, "viewport_levels")
        col.prop(self, "render_levels")

def register():
    bpy.utils.register_class(SCEASAR_OT_edit_subsurf_popup)

def unregister():
    bpy.utils.unregister_class(SCEASAR_OT_edit_subsurf_popup)


* S_Ceasar/operators/modeling/op_mod_subsurf_remove.py

import bpy

class SCEASAR_OT_remove_subsurf(bpy.types.Operator):
    bl_idname = "sceasar.remove_subsurf"
    bl_label = "Remove Subsurf"
    
    @classmethod
    def poll(cls, context):
        return context.selected_objects and any(obj.type == 'MESH' and obj.data.uv_layers for obj in context.selected_objects)
    
    def execute(self, context):
        meshes = [obj for obj in context.selected_objects if obj.type == 'MESH']
        count = 0
        for obj in meshes:
            mod = obj.modifiers.get("MySubsurf")
            if mod:
                obj.modifiers.remove(mod)
                count += 1
        
        if count == 0:
            self.report({'ERROR'}, "No Subsurf modifiers found")
        else:
            self.report({'INFO'}, f"Removed Subsurf from {count} object(s)")
        
        return {'FINISHED'}

def register():
    bpy.utils.register_class(SCEASAR_OT_remove_subsurf)

def unregister():
    bpy.utils.unregister_class(SCEASAR_OT_remove_subsurf)


* S_Ceasar/operators/__init__.py

from . import modeling, uv

def register():
    modeling.register()
    uv.register()

def unregister():
    uv.unregister()
    modeling.unregister()


* ui/__init__.py

from . import (
    core_ui,
    modeling_ui,
    uv_ui
)

def register():
    core_ui.register()
    modeling_ui.register()
    uv_ui.register()


def unregister():
    uv_ui.unregister()
    modeling_ui.unregister()
    core_ui.unregister()


* ui/core_ui.py

import bpy

class SCEASAR_Properties(bpy.types.PropertyGroup):
    mode: bpy.props.EnumProperty(
        name="Department",
        items = [
            ('MODELING', "Modeling", "Modeling Tools", 'GHOST_ENABLED', 0),
            ('UV', "UV Mapping", "UV Tools", 'GROUP_UVS', 1),
            ('TEXTURING', "Texturing", "Texturing Tools", 'TEXTURE', 2),
            ('LOOKDEV', "Lookdev", "Look Development Tools", 'MATERIAL', 3),
            ('RIGGING', "Rigging", "Rigging Tools", 'BONE_DATA', 4),
            ('LAYOUT', "Layout", "Layout / Previs Tools", 'OUTLINER_OB_CAMERA', 5),
            ('ANIMATION', "Animation", "Animation Tools", 'OUTLINER_OB_ARMATURE', 6),
            ('SIMULATION', "Simulation", "Simulation Tools", 'EXPERIMENTAL', 7),
            ('FX', "Effects", "FX Tools", 'OUTLINER_OB_POINTCLOUD', 8),
            ('LIGHTING', "Lighting", "Lighting Tools", 'OUTLINER_OB_LIGHT', 9),
            ('COMPOSITING', "Compositing", "Compositing Tools", 'NODETREE', 10),
            ('RENDERING', "Rendering", "Rendering Tools", 'RENDER_STILL', 11),           
        ],
        
        default='MODELING'
    ) # type: ignore

class SCEASAR_PT_Main(bpy.types.Panel):
    bl_label = "S Ceasar"
    bl_idname = "SCEASAR_PT_main"
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = "S Ceasar"

    def draw(self, context):
        layout = self.layout
        props = context.scene.sceasar_props
        
        row = layout.row()
        row.scale_y = 1.5
        row.prop(props, "mode", text="")

classes = (SCEASAR_Properties, SCEASAR_PT_Main)

def register():
    for cls in classes:
        bpy.utils.register_class(cls)
    bpy.types.Scene.sceasar_props = bpy.props.PointerProperty(type=SCEASAR_Properties)

def unregister():
    del bpy.types.Scene.sceasar_props
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)


* ui/modeling_ui.py

import bpy

class SCEASAR_PT_Modeling(bpy.types.Panel):
    bl_label = "Modeling"
    bl_idname = "SCEASAR_PT_modeling"
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = "S Ceasar"
    bl_parent_id = "SCEASAR_PT_main"

    @classmethod
    def poll(cls, context):
        return context.scene.sceasar_props.mode == 'MODELING'

    def draw(self, context):
        layout = self.layout

        layout.label(text="Subdivision Surface", icon="MOD_SUBSURF")
        row = layout.row(align=True)   # ðŸ‘ˆ horizontal layout
        row.scale_y = 1.1
        row.operator("sceasar.add_subsurf_popup", text="Add", icon="PLUS")
        row.operator("sceasar.edit_subsurf_popup", text="Edit", icon="MODIFIER")   # âœ… safer icon
        row.operator("sceasar.remove_subsurf", text="Remove", icon="CANCEL")


class SCEASAR_PT_Export_Modeling(bpy.types.Panel):
    bl_label = "Export"   # âœ… Changed from "Modeling"
    bl_idname = "SCEASAR_PT_export_modeling"
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = "S Ceasar"
    bl_parent_id = "SCEASAR_PT_modeling"
    bl_options = {'DEFAULT_CLOSED'}   # collapsed by default

    @classmethod
    def poll(cls, context):
        return context.scene.sceasar_props.mode == 'MODELING'

    def draw(self, context):
        layout = self.layout

        layout.label(text="Export Options", icon="EXPORT")
        
        col = layout.column(align=True)
        col.scale_y = 1.2
        col.operator("sceasar.add_subsurf_popup", text="Add", icon="PLUS")
        col.operator("sceasar.edit_subsurf_popup", text="Edit", icon="MODIFIER")
        col.operator("sceasar.remove_subsurf", text="Remove", icon="CANCEL")


def register():
    bpy.utils.register_class(SCEASAR_PT_Modeling)
    bpy.utils.register_class(SCEASAR_PT_Export_Modeling)

def unregister():
    bpy.utils.unregister_class(SCEASAR_PT_Export_Modeling)
    bpy.utils.unregister_class(SCEASAR_PT_Modeling)


* S_Ceasar/

bl_info = {
    "name": "S Ceasar",
    "author": "Ananthan AKA Jokaper 21",
    "version": (1, 0),
    "blender": (4, 5, 0),
    "location": "View3D > Sidebar > S Ceasar",
    "description": "Pipeline Tools for Modeling and Texturing",
    "category": "3D View",
}

from . import operators, ui

def register():
    ui.register()
    operators.register()

def unregister():
    operators.unregister()
    ui.unregister()

if __name__ == "__main__":
    register()
